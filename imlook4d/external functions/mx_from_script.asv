
%**************************************************************************
%Function Name: mx_from_script (based on mx)
%Author: Mats Jonsson, Anna Ringheim, Jan Axelsson (imlook4d script interface)
%Created: 030402
%Description:   Main program for generating parameter maps.
%               The program may be used stand-alone, working as clasic mx.
%               The program may be called as a function, as used from
%               imlook4d.
%
%Input:  - mxInput  Used to preset ECAT tags from imlook4d 
%Output: none
%
%Function calls: mx_StartPar, ECATread, mx_ExtractPETTimes, mx_GetInputData
%mx_GetRefData, mx_Conv_Tact2Input, mx_ExtractBloodTimes, RATESread,
%mx_GetSelectedFilenames, mx_FilterIma, mx_SaveMaps,
%mx_model_inp_itr_bloodflow, mx_model_inp_lin_CBV, mx_model_inp_lin_lin3k,
%mx_model_inp_lin_logan, mx_model_inp_lin_patlak, mx_model_ref_itr_srtm,
%mx_model_ref_lin_logan, mx_model_ref_lin_patlak,
%mx_model_ref_lin_sumframes, mx_model_ref_lin_sumratio,
%mx_model_spec_itr_acemyocard
%Revision history:
%Version    Name	Date        Comment
%0.8        MJ     030402       First version
%1.0        AR     080318       New simpler user interface.
%1.1        AR     080602       No bolus time for ref tissue models. Option
%                               to save and load a session.
%           JA                  Introduce DICOM support via imlook4d interface
%**************************************************************************

function mx_from_script(mxInput)

%Variables ------------------------------------------------------------------------
SelectedPMaps = [];
SelectedEMaps = [];
SubStruct = [];
CrefStruct = [];
ROIName = [];
ResultFilt = {};
Filt = {};
PFilenames = {};
EFilenames = {};
ModelCpet = {};
ModelCinp = {};
ModelHC = {};
pmaplist = [];
%----------------------------------------------------------------------------------

program_version = '1.1';

warning off MATLAB:DirChangeHandleWarn

%--------------------------------------------------------------------------
%Load session or start from beginning?
load_session = menu('Start a new or load an old session?','Start a new session','Load an old session');

if load_session == 1  %Only if new session.
    %Get model and model specific parameters.
    model = mx_StartPar;
    model.program_version = program_version;
elseif load_session == 2  %Load session.
    %Retrieve information from the session file.
    [session_filename,sessionpath] = uigetfile('*.mx_ses*','Select a session file:');
    %Load file.
    load('-mat', [sessionpath session_filename]);
    %Print info from session file.
    infosentence{1,1} = sprintf('Information from session file: \n\nModel: %s', model.model_name);
    infosentence{2,1} = ['Tracer: ' model.tracer{1}];
    pmaps_sent = [];
    for i =1:length(SelectedPMaps)
        pmaps_sent = [pmaps_sent pmaptypes(SelectedPMaps(i)).pmaptype ' '];
    end
    infosentence{3,1} = ['Selected param map: ' pmaps_sent];
    emaps_sent = [];
    for i =1:length(SelectedEMaps)
        emaps_sent = [emaps_sent emaptypes(SelectedEMaps(i)).emaptype ' '];
    end
    infosentence{4,1} = ['Selected error map: ' emaps_sent];
    userfields = fieldnames(UserParams);
    for i = 1:length(userfields)
        sTempName = userfields{i};
        if isempty(strfind(sTempName,'Tbol')) &  isempty(strfind(sTempName,'Sbs_c')) %Display info if not bolus times or glucose conc.
            sTempUnit = getfield(UserParams, sTempName, 'unit');
            if strcmp(sTempUnit,'min')  %Convert back to minutes.
                fTempValue = getfield(UserParams, sTempName, 'value')/60;
            elseif strcmp(sTempUnit,'/min')  %Convert back to /minutes.
                fTempValue = getfield(UserParams, sTempName, 'value')*60;
            else
                fTempValue = getfield(UserParams, sTempName, 'value');
            end
            sTempDescrip = getfield(UserParams, sTempName, 'descrip');
            if (length(fTempValue)==1)
                infosentence{4+i} = [sTempDescrip ': ' num2str(fTempValue) ' ' sTempUnit];
            elseif (length(fTempValue)<1)
                infosentence{4+i} = [sTempDescrip ': No value'];
            elseif (length(fTempValue)>1)
                iTempSize = size(fTempValue);
                %Check if all values the same in the matrix, then we can write the value also.
                if ( max(max(fTempValue)) == min(min(fTempValue)) )
                    infosentence{4+i} = [sTempDescrip ': Size ' num2str(iTempSize(1)) 'x' num2str(iTempSize(2)) ' Constant value ' num2str(fTempValue(1,1))];
                else
                    infosentence{4+i} = [sTempDescrip ': Size ' num2str(iTempSize(1)) 'x' num2str(iTempSize(2))];
                end
            end
        end
    end
    acc_session = menu(infosentence,'Accept this session file','Start a new session');

    if acc_session == 2  %Start a new session.
        load_session = 1;
        %Get model and model specific parameters.
        model = mx_StartPar;
        model.program_version = program_version;
    end

end
%--------------------------------------------------------------------------

%Get PET data.

%JAN
if nargin~=0
    % JAN - this is new code for imlook4d data
    PETTimes=mxInput.PETTimes;
    ModelCpet=mxInput.ModelCpet;
    image=mxInput.image;
else
    % JAN - this is original code for ECAT data
    % Run mx the conventional way without imlook4d
    image = ECATread;
    ResultPath = [fileparts(image.header(1).fname) '\'];
    cd(ResultPath);

    %Get camera time information in suitable format.
    PETTimes = mx_ExtractPETTimes(image.header);
    %Prepare camera data for the model.
    ModelCpet = [];
    ModelCpet = setfield(ModelCpet, 'exprm1_filename', image.header(1).fname);
    ModelCpet = setfield(ModelCpet, 'exprm1_data', image.data);
    ModelCpet = setfield(ModelCpet, 'exprm1_time', PETTimes);
end

%--------------------------------------------------------------------------

%Get blood input data.
if findstr(cell2mat(model.modeldata),'blood')
    BloodData = mx_GetInputData(model, image.header);
    BloodTimes = mx_ExtractBloodTimes(BloodData);

    %Prepare input data for the model.
    ModelCinp = [];
    ModelCinp = setfield(ModelCinp, 'exprm1_data', 'wholeblood', BloodData.wholeblood);
    ModelCinp = setfield(ModelCinp, 'exprm1_data', 'bloodinput', BloodData.bloodinput);
    ModelCinp = setfield(ModelCinp, 'exprm1_time', 'start', BloodTimes.start');
    ModelCinp = setfield(ModelCinp, 'exprm1_time', 'end', BloodTimes.start');
end

%--------------------------------------------------------------------------

%Get reference tact data.
if findstr(cell2mat(model.modeldata),'tact')

    CrefStruct = mx_GetRefData(model, image.header);
    ROIName = CrefStruct.exprm1.ROIName;
    %Prepare input data for the model.
    ModelCinp = [];
    ModelCinp = setfield(ModelCinp, 'exprm1_data', 'tissue', CrefStruct.exprm1.reference);
    ModelCinp = setfield(ModelCinp, 'exprm1_time', 'start', CrefStruct.exprm1.framestart);
    ModelCinp = setfield(ModelCinp, 'exprm1_time', 'end', CrefStruct.exprm1.frameend);

    if findstr(model.type,'special')
        if strfind(model.model_name,'Acetate Myocard (iterative)')
            metab_fl = 1;  %Always do metabolite correction for acetate myocard.
        end
        BloodData = mx_Conv_Tact2Input(CrefStruct,metab_fl,model.model_name);
        BloodTimes = mx_ExtractBloodTimes(BloodData);
        %Prepare input data for the model.
        ModelCinp = [];
        ModelCinp = setfield(ModelCinp, 'exprm1_data', 'wholeblood', BloodData.wholeblood);
        ModelCinp = setfield(ModelCinp, 'exprm1_data', 'bloodinput', BloodData.bloodinput);
        ModelCinp = setfield(ModelCinp, 'exprm1_time', 'start', BloodTimes.start);
        ModelCinp = setfield(ModelCinp, 'exprm1_time', 'end', BloodTimes.end);

    end
end

%--------------------------------------------------------------------------

%Get total counts or tact curve for use in Blood flow model.
if findstr(cell2mat(model.modeldata),'head')
    hc_list = {'Total counts','Tact'};
    hc_num = menu('Use total counts or tact curve to fit delay and dispersion?',hc_list);
    switch hc_list{hc_num}
        case 'Total counts',
            ratesdata=RATESread;
            %Decay correction
            decay_f = exp(ratesdata.time*log(2)/image.header(1).mh.ISOTOPE_HALFLIFE);
            fCtotDec = ratesdata.promptrate.* decay_f;
            %Prepare headcurve data for the model.
            ModelHC.C_totcts = fCtotDec;
            ModelHC.T_totcts = ratesdata.time;
        case 'Tact',
            CrefStruct = mx_GetRefData(model, image.header);
            %Prepare tact data for the model.
            ModelHC.C_tact=CrefStruct.reference;
            ModelHC.T_tact=CrefStruct.framestart+0.5*CrefStruct.frameend;
    end
end

%--------------------------------------------------------------------------

if load_session == 1  %Only if new session.
    %Investigate which parameters are needed in this model.
    UserParams = feval(model.modelfile, 'get_user_params');
    paramfields = fieldnames(UserParams);

    %Check if need BV value.
    if any(strcmp(paramfields, 'BV'))
        %Ask user if want to load CBV map or use fixed value.
        bv_list = {'Fixed fractional blood volume','Load blood volume map'};
        %If model can fit cbv ask for that also.
        if any(strcmp(paramfields, 'T_BV_uplimit'))
            bv_list = [bv_list 'Fit fractional blood volume'];
        end
        bv_num = menu('Type of blood volume correction?', bv_list);

        switch bv_list{bv_num}
            case 'Fixed fractional blood volume',
                %Remove question about fit of blood volume from list to user.
                paramfields = paramfields((~strcmp(paramfields, 'T_BV_lowlimit')));
                paramfields = paramfields((~strcmp(paramfields, 'T_BV_uplimit')));
            case 'Load blood volume map'
                cbvimage = ECATread;
                UserParams.BV.value = cbvimage.data;
                UserParams.BV.log_info = ['File: ' cbvimage.header(1).fname];
                %Remove question about fixed blood volume and fit of blood volume from list to user.
                paramfields = paramfields((~strcmp(paramfields, 'BV')));
                paramfields = paramfields((~strcmp(paramfields, 'T_BV_lowlimit')));
                paramfields = paramfields((~strcmp(paramfields, 'T_BV_uplimit')));
            case 'Fit fractional blood volume'
                %Remove question about fixed blood volume from list to user.
                paramfields = paramfields((~strcmp(paramfields, 'BV')));
        end
    end

    %For Patlak analysis, only ask for Sbs_c and LC if FDG.
    if strfind(model.model_name, 'Input Patlak (linear)')
        if isempty(strfind(upper(char(model.tracer)),'FDG'))  %If not FDG.
            %Remove question about Sbs_c and LC from list to user.
            paramfields = paramfields((~strcmp(paramfields, 'Sbs_c')));
            paramfields = paramfields((~strcmp(paramfields, 'LC')));
        end
    end

    %Ask user for user parameter input.
    title = 'Parameter input ';
    for i=1:length(paramfields)
        param_list{i} = [getfield(UserParams,paramfields{i},'descrip') ' (' getfield(UserParams,paramfields{i},'unit') ')'];
        param_def{i} = num2str(getfield(UserParams,paramfields{i},'def_value'));
    end
    paramtemp = inputdlg(param_list,title,1,param_def);

    %Put values into UserParams struct.
    for i=1:length(paramtemp)
        UserParams = setfield(UserParams, paramfields{i}, 'value',str2double(paramtemp(i)));
    end

    %Correct some values in UserParams struct.
    for i=1:length(paramtemp)
        %Change "bolus" and "end" to values.
        if strcmp(paramtemp{i}, 'bolus')  %Change from "bolus" to actual camera bolus time.
            UserParams = setfield(UserParams, paramfields{i}, 'value',getfield(UserParams,'Tbol_pet','value'));  %Tbol_pet in sec.
            if strcmp(getfield(UserParams,paramfields{i},'unit'), 'min')
                UserParams = setfield(UserParams, paramfields{i}, 'value',getfield(UserParams, paramfields{i}, 'value')/60);  %Convert to min.
            end
        end
        if strcmp(paramtemp{i}, 'end')  %Change from "end" to actual end time of last frame.
            UserParams = setfield(UserParams, paramfields{i}, 'value',(image.header(end).sh.FRAME_START_TIME+image.header(end).sh.FRAME_DURATION)/1000);  %Convert end time to sec.
            if strcmp(getfield(UserParams,paramfields{i},'unit'), 'min')
                UserParams = setfield(UserParams, paramfields{i}, 'value',getfield(UserParams, paramfields{i}, 'value')/60);  %Convert to min.
            end
        end
        %Convert to seceonds, where the unit is set to minutes.
        if strcmp(getfield(UserParams,paramfields{i},'unit'), 'min')
            UserParams = setfield(UserParams, paramfields{i}, 'value',getfield(UserParams, paramfields{i}, 'value')*60);  %Convert to sec.
        end
        %Convert to per seceonds, where the unit is set to per minutes.
        if strcmp(getfield(UserParams,paramfields{i},'unit'), '/min')
            UserParams = setfield(UserParams, paramfields{i}, 'value',getfield(UserParams, paramfields{i}, 'value')/60);  %Convert to /sec.
        end

    end
    %Produce a constant map of bv values.
    if any(strcmp(paramfields, 'BV'))
        UserParams.BV.value = repmat(str2double(paramtemp(strcmp(paramfields, 'BV'))), [size(image.data,1), size(image.data,2), size(image.data,3)]);  %Constant map.
    end

    %Get information about selected model. Save in struct model.
    modelversion = feval(model.modelfile, 'get_model_version');
    % modeldescr = feval(model.modelfile, 'get_model_description');

    model.model_version = modelversion;
    % model.modeldescr = modeldescr;

    %Get information about which parameter maps and error maps that are available.
    pmaptypes = feval(model.modelfile, 'get_parameter_map_types', model.tracer);
    emaptypes = feval(model.modelfile, 'get_error_map_types', model.tracer);

    %Generate result image filenames.
    availpmaps = [1:length(pmaptypes)];
    availemaps = [1:length(emaptypes)];
    pavailfilenames = mx_GetSelectedFilenames(pmaptypes, availpmaps, image.header(1).fname);
    eavailfilenames = mx_GetSelectedFilenames(emaptypes, availemaps, image.header(1).fname);

    %Let the user select the parameter maps.
    for i=1:length(pmaptypes)
        pmaplist{i} = pmaptypes(i).pmaptype;
        if (isempty(strfind(model.model_name, 'Input CBV (linear)')) & strfind(pmaptypes(i).pmaptype, 'BV'))  %Only produce cbv map if cbv is fitted (not for CBV model).
            if isempty(strfind(bv_list{bv_num},'Fit fractional blood volume'))
                pmaplist=pmaplist(1:i-1);
            end
        end
    end


    SelectedPMaps = listdlg('PromptString','Select the parameter maps you want to generate: ',...
        'ListSize', [250 200], 'ListString', pmaplist,'Name','Parameter map selection');
    PFilenames=cell(size(pavailfilenames));
    for i=1:length(SelectedPMaps)
        PFilenames(SelectedPMaps(i)) = pavailfilenames(SelectedPMaps(i));
    end

    %Let the user select the error maps (for the future).
    SelectedEMaps = [];
    % for i=1:length(emaptypes)
    %     emaplist{i} = emaptypes(i).emaptype;
    % end
    % SelectedEMaps = listdlg('PromptString','Select the error maps you want to generate: ',...
    %                 'ListSize', [250 200], 'ListString', emaplist,'Name','Error map selection');
    % EFilenames=cell(size(eavailfilenames));
    % for i=1:length(SelectedEMaps)
    %     EFilenames(SelectedEMaps(i)) = eavailfilenames(SelectedEMaps(i));
    % end
    
else  %Loaded session.

    %Ask for some scan specific parameters.
    paramfields_orig = fieldnames(UserParams);
    paramfields = paramfields_orig;
%     for i = 1:length(paramfields_orig)
%         sTempName = paramfields_orig{i};

        %Check if BV value is from a BV map. If it is, need to ask for a
        %scan specific BV map.
        if any(strcmp(paramfields_orig, 'BV'))
            fTempValue = UserParams.BV.value;
            if (length(fTempValue)>1)  %BV map
                %Check if all values the same in the matrix.
                if ~( max(max(fTempValue)) == min(min(fTempValue)) )  %Last session used loaded blood volume map.

                    %Ask user if want to load CBV map or use fixed value.
                    bv_list = {'Fixed fractional blood volume','Load blood volume map'};
                    %If model can fit cbv ask for that also.
                    if any(strcmp(paramfields_orig, 'T_BV_uplimit'))
                        bv_list = [bv_list 'Fit fractional blood volume'];
                    end
                    bv_num = menu('Type of blood volume correction?', bv_list);
                
                elseif ( max(max(fTempValue)) == min(min(fTempValue)) )  %Last session used fixed blood volume.
                    bv_num = 1; 
                    bv_list = {'Fixed fractional blood volume','Load blood volume map','Fit fractional blood volume'};
                    %Remove question about fixed blood volume and fit of blood volume from list to user (assume wants the same).
                    paramfields = paramfields((~strcmp(paramfields, 'BV')));

                end
            elseif ~isempty(UserParams.T_BV_uplimit.value)  %Last session used "Fit bv".
                    bv_num = 3;
                    bv_list = {'Fixed fractional blood volume','Load blood volume map','Fit fractional blood volume'};
                    %Remove question about fit of blood volume from list to user (do not need to ask again).
                    paramfields = paramfields((~strcmp(paramfields, 'T_BV_lowlimit')));
                    paramfields = paramfields((~strcmp(paramfields, 'T_BV_uplimit')));
            end
            switch bv_list{bv_num}
                case 'Fixed fractional blood volume',
                    %Remove question about fit of blood volume from list to user.
                    paramfields = paramfields((~strcmp(paramfields, 'T_BV_lowlimit')));
                    paramfields = paramfields((~strcmp(paramfields, 'T_BV_uplimit')));
                case 'Load blood volume map'
                    cbvimage = ECATread;
                    UserParams.BV.value = cbvimage.data;
                    UserParams.BV.log_info = ['File: ' cbvimage.header(1).fname];
                    %Remove question about fixed blood volume and fit of blood volume from list to user.
                    paramfields = paramfields((~strcmp(paramfields, 'BV')));
                    paramfields = paramfields((~strcmp(paramfields, 'T_BV_lowlimit')));
                    paramfields = paramfields((~strcmp(paramfields, 'T_BV_uplimit')));
                case 'Fit fractional blood volume'
                    %Remove question about fixed blood volume from list to user.
                    paramfields = paramfields((~strcmp(paramfields, 'BV')));
            end
        end

    if strfind(model.model_name, 'Input Patlak (linear)') & ~isempty(strfind(upper(char(model.tracer)),'FDG')) %For Patlak analysis, only ask for Sbs_c 1 if FDG.
        %         if isempty(strfind(upper(char(model.tracer)),'FDG'))  %If not FDG.
        %If not bolus or glucose conc or BV, remove question from list to user.
        paramfields = paramfields(sum([strcmp(paramfields, 'Tbol_pet'),strcmp(paramfields, 'Tbol_inp'),strcmp(paramfields, 'Sbs_c'),strcmp(paramfields, 'BV'),strcmp(paramfields, 'T_BV_lowlimit'),strcmp(paramfields, 'T_BV_uplimit')],2,'native'));
    else
        %If not bolus or glucose conc or BV, remove question from list to user.
        paramfields = paramfields(sum([strcmp(paramfields, 'Tbol_pet'),strcmp(paramfields, 'Tbol_inp'),strcmp(paramfields, 'BV'),strcmp(paramfields, 'T_BV_lowlimit'),strcmp(paramfields, 'T_BV_uplimit')],2,'native'));
    end
    %Ask user for user parameter input.
    title = 'Parameter input ';
    for i=1:length(paramfields)
        param_list{i} = [getfield(UserParams,paramfields{i},'descrip') ' (' getfield(UserParams,paramfields{i},'unit') ')'];
        param_def{i} = num2str(getfield(UserParams,paramfields{i},'def_value'));
    end
    paramtemp = inputdlg(param_list,title,1,param_def);

    %Put values into UserParams struct.
    for i=1:length(paramtemp)
        UserParams = setfield(UserParams, paramfields{i}, 'value',str2double(paramtemp(i)));
        %Produce a constant map of bv values.
    end
    if any(strcmp(paramfields, 'BV'))
        UserParams.BV.value = repmat(str2double(paramtemp(strcmp(paramfields, 'BV'))), [size(image.data,1), size(image.data,2), size(image.data,3)]);  %Constant map.
    end


    %Generate result image filenames.
    availpmaps = [1:length(pmaptypes)];
    availemaps = [1:length(emaptypes)];
    pavailfilenames = mx_GetSelectedFilenames(pmaptypes, availpmaps, image.header(1).fname);
    eavailfilenames = mx_GetSelectedFilenames(emaptypes, availemaps, image.header(1).fname);

    PFilenames=cell(size(pavailfilenames));
    for i=1:length(SelectedPMaps)
        PFilenames(SelectedPMaps(i)) = pavailfilenames(SelectedPMaps(i));
    end

    %Let the user select the error maps (for the future).
    SelectedEMaps = [];
end

%--------------------------------------------------------------------------

%Prepare selected map types for the model.
ModelMapTypes = [];
ModelMapTypes = setfield(ModelMapTypes, 'pmaps', SelectedPMaps);
ModelMapTypes = setfield(ModelMapTypes, 'emaps', SelectedEMaps);

%Calculate parameter and error maps.
[PResult, EResult, Messages, UserParams] = feval(model.modelfile, ...
    'calc_maps', ...
    model.tracer, ...
    ModelMapTypes, ...
    ModelCpet, ...
    ModelCinp, ...
    ModelHC,...
    [], ...
    UserParams, ...
    image.header);

%--------------------------------------------------------------------------
% JAN - commented out
% %Display parameter images.
% for i=1:length(PResult)
%     if ~isempty(PResult{i})
%         fhan= figure ('Name', ['Parameter images "' pavailfilenames{i} '"']);
%         % Get current figure properties.
%         fpos= get( fhan, 'Position');		%   size of figure in pixels
%         fpos(1)= fpos(1) - 0.5*fpos(3);
%         fpos(2)= fpos(2) - 1.1*fpos(4);
%         fpos(3)= 2*fpos(3);
%         fpos(4)= 2.1*fpos(4);
%         set( fhan, 'Position', fpos)		% resize the figure
% 
%         %Get result matrix.
%         Pmap = PResult{i};
%         nslice = size(Pmap,3);
%         %Get max value in scan.
%         maxval=mean(max(max(Pmap)));
%         %Number of columns in subplot.
%         %subcol = ceil(nslice/8+1);
%         subcol = 9;
%         %Create a special vector to use for plotting color bar.
%         barvec = [1 2 3 4 5 6 7 8]*subcol;
% 
%         sc = 0;  %Count slices for plotting.
%         for j=1:8*subcol
%             if all(j~=barvec)  %Only subplot where the colorbar is not located.
%                 if sc<nslice
%                     subplot(8, subcol,j)
%                     sc = sc+1;
%                     data=fliplr(rot90(Pmap(:,:,sc),3));
%                     clims=[1e-5 maxval];
%                     imagesc(data,clims);
%                     set(gca,'xtick',[],'ytick',[])
%                     text(30,-10,['Slice ' num2str(sc)],'FontSize',8);
%                 end
%             end
% 
%         end
%         subplot(8, subcol,barvec)
%         h= imagesc(data,clims);
%         set(h,'Visible','off')
%         set(gca,'Visible','off')
%         set(colorbar('vert'),'FontSize',10);
%         text(150,-3,pmaptypes(i).mapunit,'FontSize',10);
%         text(-2000,-3,pavailfilenames{i},'FontSize',14);
%     end
% end
        % JAN
        Pmap = PResult{i};
        imlook4d(Pmap);
%--------------------------------------------------------------------------

%Filter parameter maps.
filter_fl = 1;
while filter_fl>0
    filt_list = {'No','Gaussian','Mean','Median','Std'};
    filt_num = menu('Filter parameter images (2D filter)?',filt_list);
    switch filt_list{filt_num}
        case 'No',
            filter_fl = 0;
        case 'Gaussian',
            filter_fl = 1;
            Filt.text = 'Full Width at Half Maximum (FWHM) in mm : ';
        case 'Mean',
            filter_fl = 1;
            Filt.text = 'Filter width in pixels : ';
        case 'Median',
            filter_fl = 1;
            Filt.text = 'Filter width in pixels : ';
        case 'Std',
            filter_fl = 1;
            Filt.text = 'Filter width in pixels : ';
        otherwise
            error(['Unknown filter method: ' filt_list{filt_num}]);
    end
    if filter_fl == 1
        Filt.type = filt_list{filt_num};
        fwhm = str2num(char(inputdlg(['Give ' Filt.text], 'Input filter',1,{'5'})));
        if isempty(fwhm)
            Filt.fwhm = 5;
        else
            Filt.fwhm = fwhm;
        end
        Filt.cut = 0.1;
        for i = 1:length(PResult)
            ResultFilt{i} = mx_FilterIma(PResult{i}, Filt.type, Filt.fwhm, image.header(1).sh.X_PIXEL_SIZE*10, Filt.cut);
        end
% Jan - commented out
%         %Plot filtered images.
%         for i=1:length(ResultFilt)
%             if ~isempty(ResultFilt{i})
%                 fhan= figure ('Name', ['Filtered parameter images "' pavailfilenames{i} '_filt" Filter: ' Filt.type ', ' Filt.text num2str(Filt.fwhm)]);
%                 % Get current figure properties.
%                 fpos= get( fhan, 'Position');		%   size of figure in pixels
%                 fpos(1)= fpos(1) - 0.5*fpos(3);
%                 fpos(2)= fpos(2) - 1.1*fpos(4);
%                 fpos(3)= 2*fpos(3);
%                 fpos(4)= 2.1*fpos(4);
%                 set( fhan, 'Position', fpos)		% resize the figure
% 
%                 %Get result matrix.
%                 Pmap = ResultFilt{i};
%                 nslice = size(Pmap,3);
%                 %Get max value in scan.
%                 maxval=mean(max(max(Pmap)));
%                 %Number of columns in subplot.
%                 %subcol = ceil(nslice/8+1);
%                 subcol = 9;
%                 %Create a special vector to use for plotting color bar.
%                 barvec = [1 2 3 4 5 6 7 8]*subcol;
% 
%                 sc = 0;  %Count slices for plotting.
%                 for j=1:8*subcol
%                     if all(j~=barvec)  %Only subplot where the colorbar is not located.
%                         if sc<nslice
%                             subplot(8, subcol,j)
%                             sc = sc+1;
%                             data=fliplr(rot90(Pmap(:,:,sc),3));
%                             clims=[1e-5 maxval];
%                             imagesc(data,clims);
%                             set(gca,'xtick',[],'ytick',[])
%                             text(30,-10,['Slice ' num2str(sc)],'FontSize',8);
%                         end
%                     end
% 
%                 end
%                 subplot(8, subcol,barvec)
%                 h= imagesc(data,clims);
%                 set(h,'Visible','off')
%                 set(gca,'Visible','off')
%                 set(colorbar('vert'),'FontSize',10);
%                 text(150,-3,pmaptypes(i).mapunit,'FontSize',10);
%                 text(-2000,-3,pavailfilenames{i},'FontSize',14);
%             end
%         end

        % JAN
        imlook4d(Pmap);

        filter_acc = menu('Accept filter?', 'Yes','No');
        if filter_acc==1
            filter_fl = 0;
        elseif filter_acc==2
            filter_fl = 1;
        end
    end

end

%--------------------------------------------------------------------------

if findstr(cell2mat(model.modeldata),'blood')
    Input1Filename = BloodData.FileName{1};
elseif findstr(cell2mat(model.modeldata),'tact')
    Input1Filename = CrefStruct.exprm1.FileName{1};
else
    Input1Filename = '';
end
Input2Filename = '';

% JAN - if clause around original code 
%(write to ECAT disabled when calling from imlook4d)
if nargin==0
    %Write selected parameter maps and log files.
    PSuccWritten = mx_SaveMaps(PResult, ...
        SelectedPMaps, ...
        PFilenames, ...
        ResultPath, ...
        pmaptypes, ...
        image.header, ...
        {Input1Filename, Input2Filename}, ...
        model, ...
        UserParams, ....
        model.tracer, ...
        ROIName, ...
        Filt,...
        ResultFilt);

    %Write selected error maps and log files.
    ESuccWritten = mx_SaveMaps(EResult, ...
        SelectedEMaps, ...
        EFilenames, ...
        ResultPath, ...
        emaptypes, ...
        image.header, ...
        {Input1Filename, Input2Filename}, ...
        model, ...
        UserParams, ....
        model.tracer, ...
        ROIName, ...
        {},...
        {});
end
%--------------------------------------------------------------------------

%Save session?
save_session = menu('Save session for future use?','Yes','No');
if save_session == 1
    [path,file,ext] = fileparts(image.header(1).fname);
    session_file = [path '\' upper(char(model.tracer)) '_' model.modelfile(10:end) '.mx_ses'];
    [session_filename,sessionpath] = uiputfile('*.mx_ses*','Save session file as:' ,session_file);
    Saved = mx_SaveSession([sessionpath session_filename],model, SelectedPMaps, SelectedEMaps, ...
        UserParams, pmaptypes, emaptypes);
end
disp('mx - Completed');
